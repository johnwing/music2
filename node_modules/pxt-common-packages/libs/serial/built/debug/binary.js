// total=15186 new=81.81% cached=0.00% other=18.19%
(function (ectx) {
'use strict';
const runtime = ectx.runtime;
const oops = ectx.oops;
const doNothing = ectx.doNothing;
const pxsim = ectx.pxsim;
const globals = ectx.globals;
const maybeYield = ectx.maybeYield;
const setupDebugger = ectx.setupDebugger;
const isBreakFrame = ectx.isBreakFrame;
const breakpoint = ectx.breakpoint;
const trace = ectx.trace;
const checkStack = ectx.checkStack;
const leave = ectx.leave;
const checkResumeConsumed = ectx.checkResumeConsumed;
const setupResume = ectx.setupResume;
const setupLambda = ectx.setupLambda;
const checkSubtype = ectx.checkSubtype;
const failedCast = ectx.failedCast;
const buildResume = ectx.buildResume;
const mkVTable = ectx.mkVTable;
const __this = runtime;
const pxtrt = pxsim.pxtrt;
let yieldSteps = 1;
ectx.setupYield(function() { yieldSteps = 100; })
pxsim.setTitle("serial");
pxsim.setConfigData({}, {});
pxtrt.mapKeyNames = [
 "",
 "buf",
 "decoder",
 "serialDevice",
 "writeLine",
 "writeString"
];
__this.setupPerfCounters([]);
const pxsim_Array__getAt = pxsim.Array_.getAt;
const pxsim_Array__length = pxsim.Array_.length;
const pxsim_Array__mk = pxsim.Array_.mk;
const pxsim_Array__push = pxsim.Array_.push;
const pxsim_Boolean__bang = pxsim.Boolean_.bang;
const pxsim_String__concat = pxsim.String_.concat;
const pxsim_String__stringConv = pxsim.String_.stringConv;
const pxsim_numops_toBool = pxsim.numops.toBool;
const pxsim_numops_toBoolDecr = pxsim.numops.toBoolDecr;
const pxsim_pxtcore_mkAction = pxsim.pxtcore.mkAction;
const pxsim_pxtcore_mkClassInstance = pxsim.pxtcore.mkClassInstance;
const pxsim_pxtrt_ldlocRef = pxsim.pxtrt.ldlocRef;
const pxsim_pxtrt_mapGetByString = pxsim.pxtrt.mapGetByString;
const pxsim_pxtrt_stclo = pxsim.pxtrt.stclo;
const pxsim_pxtrt_stlocRef = pxsim.pxtrt.stlocRef;
const pxsim_Boolean_ = pxsim.Boolean_;
const pxsim_pxtcore = pxsim.pxtcore;
const pxsim_String_ = pxsim.String_;
const pxsim_ImageMethods = pxsim.ImageMethods;
const pxsim_Array_ = pxsim.Array_;
const pxsim_pxtrt = pxsim.pxtrt;
const pxsim_numops = pxsim.numops;


function _main___P63909(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    s.i___64328 = undefined;
    r0 = (0.5 * 256);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 | 0);
    globals.oneHalfFx8___64005 = (r0);
    globals._pollEventQueue___64113 = (undefined);
    globals._intervals___64120 = (undefined);
    globals.NEW_LINE___64300 = ("\r\n");
    s.i___64328 = (0);
  case 1:
    r0 = (s.i___64328 < 10);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 2; continue; }
    r0 = (s.i___64328 + 1);
    s.tmp_1 = r0;
    s.i___64328 = (r0);
    s.tmp_2 = serial_writeLine__P64312_mk(s);
    r0 = pxsim_numops.toString(s.tmp_1);
    s.tmp_2.arg0 = r0;
    s.pc = 3; return s.tmp_2;
  case 3:
    r0 = s.retval;
    r0 = (s.i___64328 + 1);
    s.i___64328 = (r0);
    { step = 1; continue; }
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
_main___P63909.info = {"start":0,"length":0,"line":0,"column":0,"endLine":0,"endColumn":0,"fileName":"test.ts","functionName":"<main>","argumentNames":[]}
_main___P63909.continuations = [  ]

function _main___P63909_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: _main___P63909, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  i___64328: undefined,
} }





function serial_writeLine__P64312(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    s.d___64343 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = serial_device__P64298_mk(s);
    s.pc = 3; return s.tmp_0;
  case 3:
    r0 = s.retval;
    s.d___64343 = (r0);
    r0 = pxsim_numops_toBoolDecr(s.d___64343);
    if (!r0) { step = 1; continue; }
    s.tmp_0 = serial_Serial_writeLine__P64306_mk(s);
    s.tmp_0.arg0 = s.d___64343;
    s.tmp_0.arg1 = s.arg0;
    s.pc = 4; return s.tmp_0;
  case 4:
    r0 = s.retval;
  case 1:
  case 2:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
serial_writeLine__P64312.info = {"start":3420,"length":115,"line":111,"column":4,"endLine":114,"endColumn":5,"fileName":"serial.ts","functionName":"writeLine","argumentNames":["text"]}

function serial_writeLine__P64312_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_writeLine__P64312, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  d___64343: undefined,
  arg0: undefined,
} }





function serial_Serial_writeLine__P64306(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, serial_Serial__C64301_VT)) failedCast(r0);
    s.tmp_0 = serial_Serial_writeString__P64305_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = s.arg1;
    s.pc = 1; return s.tmp_0;
  case 1:
    r0 = s.retval;
    s.tmp_0 = serial_Serial_writeString__P64305_mk(s);
    s.tmp_0.arg0 = s.arg0;
    s.tmp_0.arg1 = globals.NEW_LINE___64300;
    s.pc = 2; return s.tmp_0;
  case 2:
    r0 = s.retval;
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
serial_Serial_writeLine__P64306.info = {"start":1563,"length":118,"line":48,"column":8,"endLine":51,"endColumn":9,"fileName":"serial.ts","functionName":"writeLine","argumentNames":["this","text"]}

function serial_Serial_writeLine__P64306_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_Serial_writeLine__P64306, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function serial_Serial_writeString__P64305(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    s.buf___64360 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, serial_Serial__C64301_VT)) failedCast(r0);
    r0 = pxsim_numops_toBoolDecr(s.arg1);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 1; continue; }
    { step = 3; continue; }
  case 1:
  case 2:
    r0 = pxsim.control.createBufferFromUTF8(s.arg1);
    s.buf___64360 = (r0);
    r0 = s.arg0.fields["serialDevice"];
    s.tmp_0 = r0;
    r0 = pxsim.SerialDeviceMethods.writeBuffer(s.tmp_0, s.buf___64360);
  case 3:
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
serial_Serial_writeString__P64305.info = {"start":1377,"length":176,"line":42,"column":8,"endLine":46,"endColumn":9,"fileName":"serial.ts","functionName":"writeString","argumentNames":["this","text"]}

function serial_Serial_writeString__P64305_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_Serial_writeString__P64305, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  buf___64360: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function serial_device__P64298(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    s.tx___64373 = undefined;
    s.rx___64378 = undefined;
    r0 = pxsim_numops_toBoolDecr(globals._device___64297);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_0);
    if (!r0) { step = 5; continue; }
    r0 = pxsim.pins.pinByCfg(28);
    s.tx___64373 = (r0);
    r0 = pxsim.pins.pinByCfg(21);
    s.rx___64378 = (r0);
    r0 = pxsim_numops_toBoolDecr(s.tx___64373);
    s.tmp_1 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_1);
    s.tmp_0 = r0;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = pxsim_numops_toBoolDecr(s.rx___64378);
    s.tmp_2 = r0;
    r0 = pxsim_Boolean__bang(s.tmp_2);
  case 2:
    // jmp value (already in r0)
    s.tmp_3 = r0;
    r0 = pxsim_numops_toBoolDecr(s.tmp_3);
    if (!r0) { step = 3; continue; }
    r0 = undefined;
    { step = 7; continue; }
  case 3:
  case 4:
    s.tmp_4 = serial_createSerial__P64296_mk(s);
    s.tmp_4.arg0 = s.tx___64373;
    s.tmp_4.arg1 = s.rx___64378;
    s.tmp_4.arg2 = 12;
    s.pc = 8; return s.tmp_4;
  case 8:
    r0 = s.retval;
    globals._device___64297 = (r0);
  case 5:
  case 6:
    r0 = globals._device___64297;
  case 7:
    return leave(s, r0)
  default: oops()
} } }
serial_device__P64298.info = {"start":418,"length":325,"line":15,"column":4,"endLine":23,"endColumn":5,"fileName":"serial-target.ts","functionName":"device","argumentNames":[]}

function serial_device__P64298_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_device__P64298, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  tmp_2: undefined,
  tmp_3: undefined,
  tmp_4: undefined,
  tx___64373: undefined,
  rx___64378: undefined,
} }





function serial_createSerial__P64296(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    s.dev___64399 = undefined;
    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.arg2 = (s.lambdaArgs[2]);
      s.lambdaArgs = null;
    }
    s.tmp_0 = r0 = s.arg2;
    r0 = pxsim_numops_toBool(s.tmp_0);
    if (!r0) { step = 1; continue; }
    r0 = s.tmp_0;
    { step = 2; continue; }
  case 1:
    r0 = 0;
  case 2:
    // jmp value (already in r0)
    s.tmp_1 = r0;
    r0 = pxsim.serial.internalCreateSerialDevice(s.arg0, s.arg1, s.tmp_1);
    s.dev___64399 = (r0);
    r0 = pxsim_pxtcore_mkClassInstance(serial_Serial__C64301_VT);
    s.tmp_0 = r0;
    s.tmp_1 = serial_Serial_constructor__P64307_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.tmp_1.arg1 = s.dev___64399;
    s.pc = 3; return s.tmp_1;
  case 3:
    r0 = s.retval;
    r0 = s.tmp_0;
    return leave(s, r0)
  default: oops()
} } }
serial_createSerial__P64296.info = {"start":184,"length":203,"line":9,"column":4,"endLine":12,"endColumn":5,"fileName":"serial-target.ts","functionName":"createSerial","argumentNames":["tx","rx","id"]}

function serial_createSerial__P64296_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_createSerial__P64296, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  dev___64399: undefined,
  arg0: undefined,
  arg1: undefined,
  arg2: undefined,
} }





function serial_Serial_constructor__P64307(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.arg1 = (s.lambdaArgs[1]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, serial_Serial__C64301_VT)) failedCast(r0);
    r0 = (s.arg0).fields["serialDevice"] = (s.arg1);
    r0 = pxsim_pxtcore_mkClassInstance(UTF8Decoder__C64195_VT);
    s.tmp_0 = r0;
    s.tmp_1 = UTF8Decoder_constructor__P64199_mk(s);
    s.tmp_1.arg0 = s.tmp_0;
    s.pc = 1; return s.tmp_1;
  case 1:
    r0 = s.retval;
    r0 = (s.arg0).fields["decoder"] = (s.tmp_0);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
serial_Serial_constructor__P64307.info = {"start":393,"length":143,"line":12,"column":8,"endLine":15,"endColumn":9,"fileName":"serial.ts","functionName":"inline","argumentNames":["this","serialDevice"]}

function serial_Serial_constructor__P64307_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: serial_Serial_constructor__P64307, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  tmp_1: undefined,
  arg0: undefined,
  arg1: undefined,
} }





function UTF8Decoder_constructor__P64199(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = s.arg0;
    if (!checkSubtype(r0, UTF8Decoder__C64195_VT)) failedCast(r0);
    r0 = (s.arg0).fields["buf"] = (undefined);
    r0 = undefined;
    return leave(s, r0)
  default: oops()
} } }
UTF8Decoder_constructor__P64199.info = {"start":50,"length":51,"line":3,"column":4,"endLine":5,"endColumn":5,"fileName":"pxt_modules/base/utfdecoder.ts","functionName":"inline","argumentNames":["this"]}

function UTF8Decoder_constructor__P64199_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: UTF8Decoder_constructor__P64199, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  arg0: undefined,
} }





function Fx8__P63998(s) {
let r0 = s.r0, step = s.pc;
s.pc = -1;


while (true) {
if (yieldSteps-- < 0 && maybeYield(s, step, r0)) return null;
switch (step) {
  case 0:

    if (s.lambdaArgs) {
      s.arg0 = (s.lambdaArgs[0]);
      s.lambdaArgs = null;
    }
    r0 = (s.arg0 * 256);
    s.tmp_0 = r0;
    r0 = (s.tmp_0 | 0);
    return leave(s, r0)
  default: oops()
} } }
Fx8__P63998.info = {"start":42,"length":68,"line":4,"column":0,"endLine":6,"endColumn":1,"fileName":"pxt_modules/base/fixed.ts","functionName":"Fx8","argumentNames":["v"]}

function Fx8__P63998_mk(s) {
    checkStack(s.depth);
    return {
        parent: s, fn: Fx8__P63998, depth: s.depth + 1,
        pc: 0, retval: undefined, r0: undefined, overwrittenPC: false, lambdaArgs: null,
  tmp_0: undefined,
  arg0: undefined,
} }




const serial_Serial__C64301_VT = mkVTable({
  name: "Serial",
  numFields: 2,
  classNo: 16,
  lastSubtypeNo: 16,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "serialDevice": null,
    "set/serialDevice": null,
    "decoder": null,
    "set/decoder": null,
    "writeString": serial_Serial_writeString__P64305,
    "writeLine": serial_Serial_writeLine__P64306,
  },
});
const UTF8Decoder__C64195_VT = mkVTable({
  name: "UTF8Decoder",
  numFields: 1,
  classNo: 17,
  lastSubtypeNo: 17,
  maxBgInstances: null,
  methods: {
  },
  iface: {
    "buf": null,
    "set/buf": null,
  },
});

const breakpoints = setupDebugger(1, ["NEW_LINE___64300","_device___64297"])

return _main___P63909
})
